// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma
// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
  quizzes       Quiz[]
  attempts      QuizAttempt[]
  subscriptions Subscription[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Quiz {
  id          String        @id @default(cuid())
  title       String
  description String?       @db.Text
  coverImage  String?
  published   Boolean       @default(false)
  creatorId   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  creator     User          @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  questions   Question[]
  attempts    QuizAttempt[]
}

model Question {
  id          String   @id @default(cuid())
  text        String
  explanation String?  @db.Text
  order       Int
  type        String   @default("MULTIPLE_CHOICE")
  quizId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options     Option[]
  answers     Answer[]
}

model Option {
  id         String    @id @default(cuid())
  text       String
  isCorrect  Boolean
  order      Int
  questionId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answers    Answer[]
}

model QuizAttempt {
  id         String   @id @default(cuid())
  score      Float?
  completed  Boolean  @default(false)
  startedAt  DateTime @default(now())
  completedAt DateTime?
  quizId     String
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers    Answer[]
}

model Answer {
  id            String      @id @default(cuid())
  questionId    String
  optionId      String?
  customAnswer  String?
  quizAttemptId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  question      Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  option        Option?     @relation(fields: [optionId], references: [id], onDelete: SetNull)
  quizAttempt   QuizAttempt @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
}

model Subscription {
  id               String    @id @default(cuid())
  userId           String
  status           String    @default("inactive")
  plan             String    @default("free")
  stripeCustomerId String?
  stripeSubscriptionId String?
  stripePriceId    String?
  currentPeriodStart DateTime?
  currentPeriodEnd DateTime?
  cancelAtPeriodEnd Boolean? @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}